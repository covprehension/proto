// LES INPUTS
val seed = Val[Int]
val difficulty = Val[String]
val init_conf = Val[Int]
val duration_conf = Val[Int]
val relesae_conf = Val[Int]
// LES OUTPUTS
val nbS = Val[Double]
val nbR = Val[Double]
val nbIr = Val[Double]
val nb_confinement = Val[Double]
val pic_max = Val[Double]
val jours_confinement = Val[Double]

/*
Dans Netlogo on a :
["niveau-difficulté" "Difficile"]
["confinement-tick" [10 1 30]]
["confinement-duree" [5 2 30]]
["temps_entre_confinement" [4 2 30]]
*/

val cmds = Seq(
    "random-seed ${seed}",
    "setup",
    "go"
  )

val model =
  NetLogo6Task(workDirectory / "CoVprehension_300320_Confinement_Q6_explo.nlogo", cmds) set (
      name := "confinement-stg",
      // Map the OpenMOLE variables to NetLogo variables
    inputs += seed,
    //outputs += (seed, density, difficulty, init_conf, duration_conf, relesae_conf, nbS, nbR, nbIr, nb_confinement),
    inputs += (difficulty mapped "niveau-difficulté"),
    inputs += (init_conf mapped "confinement-tick"),
    inputs += (duration_conf mapped "confinement-duree"),
    inputs += (relesae_conf mapped "temps_entre_confinement"),
    outputs += (nbS mapped "nb-S"),
    outputs += (nbIr mapped "nb-Ir"),
    outputs += (nbR mapped "nb-R"),
    outputs += (nb_confinement mapped "nb-confinement"),
    outputs += (pic_max mapped "max-Ir"),
    outputs += (jours_confinement mapped "nb-day-confinement"),
    // fixed values
    seed := 42,
    difficulty := "Difficile"
  )
 

//val env = LocalEnvironment(2)
//exploration on env
 
/* Obj : 
1. réuduire la durée du confienemnt (économique) DONE
2. réduire le nombre de persionne touché à la fin (santé publique) nbIR + nbR
3. reduire la tail du pic épidemic (soin, pas engorger les hopitaux)
*/

val evolution =
  NSGA2Evolution(
    mu = 100, // mu is the size of the population
    genome = Seq(
        init_conf in (5,20), 
        duration_conf in (5,60),
        relesae_conf in (5,20)), // genome (of individuals) is the inputs prototype and their variation ranges
    objectives = Seq(-jours_confinement, nbS, -pic_max), //ici les 3 objectifs
    // OpenMOLE provide a seed for your stochastic model to use (it is optional)
    // 20% of the evaluations are used for replicating existing solutions
    // 100 replication are stored at max for each individual
    stochastic = Stochastic(seed = seed, reevaluate = 0.2, replications = 100),
    evaluation = model,
    parallelism = 100,
    termination = 20000,
    distribution = Island(5 minutes)
  )

val env =
  SGEEnvironment(
    "delay",
    "cc2-login.cirad.fr",
    workDirectory = "/homedir/delay/work",
    queue = "short.q",
    wallTime = 4 hour
  )
  

evolution hook (workDirectory / "calibration", 100) on env

