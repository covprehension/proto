// LES INPUTS
val difficulty = Val[String]
val init_conf = Val[Int]
val duration_conf = Val[Int]
val relesae_conf = Val[Int]
// LES OUTPUTS
val nbS = Val[Int]
val nbR = Val[Int]
val nbIr = Val[Int]
val nb_confinement = Val[Int]

/*
Dans Netlogo on a :
["niveau-difficulté" "Difficile"]
["confinement-tick" [10 1 30]]
["confinement-duree" [5 2 30]]
["temps_entre_confinement" [4 2 30]]
*/

val cmds = 
  seq(
    "random-seed ${seed}",
    "setup",
    "while any? citizens with [epidemic-state = 1][go]"
  )

val model =
  NetLogo6Task(workDirectory / "CoVprehension_300320_Confinement_Q6_explo.nlogo", cmds) set (
      name := "confinement-stg",
      // Map the OpenMOLE variables to NetLogo variables
    inputs += seed,
    //outputs += (seed, density, difficulty, init_conf, duration_conf, relesae_conf, nbS, nbR, nbIr, nb_confinement),
    inputs += (difficulty mapped "niveau-difficulté"),
    inputs += (init_conf mapped "confinement-tick"),
    inputs += (duration_conf mapped "confinement-duree"),
    inputs += (relesae_conf mapped "temps_entre_confinement"),
    outputs += ("nb-S" mapped nbS),
    outputs += ("nb-Ir" mapped nbIr),
    outputs += ("nb-R" mapped nbR),
    outputs += ("nb-confinement" mapped nb_confinement)
  )
  
val cmds = Seq("random-seed ${seed}", "run-to-grid")
val ants =
  NetLogo6Task(workDirectory / "ants.nlogo", cmds) set (
    name := "ants",
    // Map the OpenMOLE variables to NetLogo variables
    inputs += (population mapped "gpopulation"),
    inputs += (diffusion mapped "gdiffusion-rate"),
    inputs += (evaporation mapped "gevaporation-rate"),
    inputs += (maxsteps mapped "gmax-steps"),
    outputs += (food1 mapped "final-ticks-food1"),
    outputs += (food2 mapped "final-ticks-food2"),
    outputs += (food3 mapped "final-ticks-food3"),
    // The seed is used to control the initialisation of the random number generator of NetLogo
    inputs += seed
 )
 
val evolution =
  NSGA2Evolution(
    mu = 100, // mu is the size of the population
    inputs = Seq(init_conf -> (5,20), duration_conf -> (5, 60), relesae_conf -> (5,20)),
    //genome = Seq(x in (0.0, 1.0), y in (0.0, 1.0)), // genome (of individuals) is the inputs prototype and their variation ranges
    objectives = Seq(nbS), //ici, il n'y a qu'un objectif
    // OpenMOLE provide a seed for your stochastic model to use (it is optional)
    // 20% of the evaluations are used for replicating existing solutions
    // 100 replication are stored at max for each individual
    stochastic = Stochastic(seed = seed, reevaluate = 0.2, replications = 100),
    evaluation = model,
    termination = 1000000
  )
  
val env = LocalEnvironment(2)

evolution on env


val exploration = 
  DirectSampling(
    evaluation = model on env by 20 hook CSVHook(workDirectory / "result.csv", seed, density, difficulty, init_conf, duration_conf, relesae_conf,
                nbS, nbR, nbIr, nb_confinement), seed, 10),
    sampling = init_conf in (10 to 30 by 1)
  )

exploration